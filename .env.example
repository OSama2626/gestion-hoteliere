# ==============================================================================
# Application Environment Variables
# ==============================================================================
# This file provides a template for the .env file.
# Copy this file to .env and fill in the actual values.
# Do NOT commit the .env file to version control.

# ------------------------------------------------------------------------------
# Server Configuration
# ------------------------------------------------------------------------------
PORT=3000
# The base URL of your frontend application, used for constructing links (e.g., password reset)
FRONTEND_URL=http://localhost:3001 # Or your frontend's actual port

# ------------------------------------------------------------------------------
# Database Configuration (MySQL)
# ------------------------------------------------------------------------------
DB_HOST=localhost
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=your_db_name
DB_PORT=3306

# ------------------------------------------------------------------------------
# JSON Web Token (JWT) Configuration
# ------------------------------------------------------------------------------
# A strong, random secret key for signing JWTs.
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your_jwt_secret_key
# JWT_EXPIRES_IN is typically set directly in the jwt.sign() options in the code (e.g., '1h', '24h').
# If you want to control it globally via .env, you'd need to modify the code to read it.
# JWT_EXPIRES_IN=24h

# ------------------------------------------------------------------------------
# Email Configuration (Nodemailer SMTP)
# ------------------------------------------------------------------------------
# These settings are used by utils/email.js to send emails.
# Common options for EMAIL_PORT:
#   587 (TLS - recommended, set EMAIL_SECURE=false or let nodemailer infer)
#   465 (SSL - set EMAIL_SECURE=true)
#   25 (Unsecured - not recommended, and often blocked by cloud providers)
# EMAIL_SECURE is often inferred by nodemailer based on the port (true for 465, false for 587).
# It can be explicitly set: 'true' or 'false'. If not set, nodemailer will try to infer.

EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
EMAIL_USER=user@example.com
EMAIL_PASS=your_email_password
EMAIL_FROM="Your App Name" <noreply@example.com>
# EMAIL_SECURE=false # Explicitly set if needed, e.g., for port 587 with STARTTLS. For port 465, it would be 'true'.

# Example for Gmail (using App Password if 2FA is enabled on Gmail account):
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=465
# EMAIL_USER=your_gmail_address@gmail.com
# EMAIL_PASS=your_gmail_app_password_not_your_regular_password
# EMAIL_FROM="Your App Name" <your_gmail_address@gmail.com>
# EMAIL_SECURE=true

# ------------------------------------------------------------------------------
# Logging Configuration (Winston - utils/logger.js)
# ------------------------------------------------------------------------------
# LOG_LEVEL can be error, warn, info, http, verbose, debug, silly.
# Default is 'info' in development and 'warn' in production if not set.
# LOG_DIR is where log files are stored. Default is 'logs'.
# NODE_ENV (development, production, test) also influences logging.
# No specific .env variables are currently used by logger.js itself, but these are common.
# LOG_LEVEL=info
# LOG_DIR=logs

# ------------------------------------------------------------------------------
# Other configurations
# ------------------------------------------------------------------------------
# Add any other application-specific environment variables here.
# For example, API keys for external services, etc.
# API_KEY_SOME_SERVICE=your_api_key
# FEATURE_FLAG_NEW_THING=true
